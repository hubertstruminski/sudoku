{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js\";\nimport React from 'react';\nimport Textarea from './Textarea';\nimport { generateBoard } from '../actions/boardActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n  constructor() {\n    super();\n\n    this.changeContent = newContent => {\n      this.setState({\n        content: newContent\n      });\n    };\n\n    this.createBoard = (...table) => {\n      let result = [];\n      let x = 0;\n\n      for (let i = 0; i < table.length; i++) {\n        for (let j = 0; j < table[i].length; j++) {\n          let children = [];\n\n          for (let k = 0; k < table[i][j].length; k++) {\n            if (table[i][j][k] === 0) {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                onClick: e => {\n                  this.onSubmit(e);\n                },\n                className: \"square\",\n                id: ++x,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 56\n                },\n                __self: this\n              }, this.state.isClickedDiv && React.createElement(Textarea, {\n                replace: this.changeContent,\n                setButtonProperties: this.setButtonProperties,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 63\n                },\n                __self: this\n              })));\n            } else {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                onClick: e => {\n                  this.onSubmit(e);\n                },\n                className: \"square\",\n                id: ++x,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 67\n                },\n                __self: this\n              }, table[i][j][k]));\n            }\n          }\n\n          result.push(children);\n          result.push(React.createElement(\"div\", {\n            className: \"clear\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }));\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      text: '',\n      isClickedDiv: false,\n      content: '',\n      object: {}\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.setButtonProperties = this.setButtonProperties.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.generateBoard(this.props.history);\n  }\n\n  setButtonProperties() {\n    this.setState({\n      isClickedDiv: false\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      isClickedDiv: true\n    }); // this.setState({ object: e.target });\n    // e.target.innerHTML = this.state.content;\n\n    return e.target;\n  }\n\n  componentDidUpdate() {\n    const object = this.onSubmit();\n    object.innerHTML = \"x\";\n  }\n\n  render() {\n    const board = this.props.board;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.createBoard(board).slice());\n  }\n\n}\n\nSudoku.propTypes = {\n  board: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  board: state.board\n});\n\nexport default connect(mapStateToProps, {\n  generateBoard\n})(Sudoku);","map":{"version":3,"sources":["/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js"],"names":["React","Textarea","generateBoard","connect","PropTypes","Sudoku","Component","constructor","changeContent","newContent","setState","content","createBoard","table","result","x","i","length","j","children","k","push","el","divRef","e","onSubmit","state","isClickedDiv","setButtonProperties","text","object","bind","componentDidMount","props","history","preventDefault","target","componentDidUpdate","innerHTML","render","board","slice","propTypes","array","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Textarea from './Textarea';\nimport { generateBoard } from '../actions/boardActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            text: '',\n            isClickedDiv: false,\n            content: '',\n            object: {}\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.setButtonProperties = this.setButtonProperties.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.generateBoard(this.props.history);\n    }\n\n    changeContent = newContent => {\n        this.setState({ content: newContent });\n    }\n\n    setButtonProperties() {\n        this.setState({ isClickedDiv: false });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        this.setState({ isClickedDiv: true })\n        // this.setState({ object: e.target });\n        // e.target.innerHTML = this.state.content;\n\n        return e.target;\n    }\n\n    componentDidUpdate() {\n        const object = this.onSubmit();\n\n        object.innerHTML = \"x\";\n    }\n\n    createBoard = (...table) => {\n        let result = [];\n        let x = 0;\n        for(let i=0; i<table.length; i++) {\n            for(let j=0; j<table[i].length; j++) {\n                let children = [];\n                for(let k=0; k<table[i][j].length; k++) {\n                    if(table[i][j][k] === 0) {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        onClick={(e) => {this.onSubmit(e)}}\n                                        className=\"square\"\n                                        id={++x}\n                                        > \n                                            { this.state.isClickedDiv && <Textarea replace={this.changeContent} setButtonProperties={this.setButtonProperties}/>}\n                                            { }\n                                    </div>);\n                    } else {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        onClick={(e) => {this.onSubmit(e)}}\n                                        className=\"square\"\n                                        id={++x}\n                                        >\n                                            { table[i][j][k] }\n                                    </div>);\n                    }\n                }\n                result.push(children);\n                result.push(<div className=\"clear\"></div>);\n            }  \n        }\n        return result;\n    }\n\n    render() {\n        const { board } = this.props;\n        return (\n            <div>\n                {this.createBoard(board).slice()}\n            </div>\n        );\n    }\n}\n\nSudoku.propTypes = {\n    board: PropTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n    board: state.board\n})\n\nexport default connect(mapStateToProps, { generateBoard })(Sudoku);"]},"metadata":{},"sourceType":"module"}