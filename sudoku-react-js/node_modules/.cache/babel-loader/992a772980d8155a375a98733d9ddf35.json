{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js\";\nimport React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n  constructor() {\n    super();\n\n    this.createBoard = (...table) => {\n      let result = [];\n      let x = 0;\n\n      for (let i = 0; i < table.length; i++) {\n        for (let j = 0; j < table[i].length; j++) {\n          let children = [];\n\n          for (let k = 0; k < table[i][j].length; k++) {\n            if (table[i][j][k] === 0) {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                className: \"square\",\n                contentEditable: \"true\",\n                onKeyDown: this.onKey // onKeyUp={this.onKey}\n                ,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 52\n                },\n                __self: this\n              }));\n            } else {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                className: \"square\" // onKeyDown={this.onKey}\n                ,\n                onKeyUp: this.onKey,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 62\n                },\n                __self: this\n              }, table[i][j][k]));\n            }\n          }\n\n          result.push(children);\n          result.push(React.createElement(\"div\", {\n            className: \"clear\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }));\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      boardTip: [],\n      isVisibleStart: false,\n      isVisibleTip: false,\n      isBlackFont: false\n    };\n    this.giveTip = this.giveTip.bind(this);\n    this.onKey = this.onKey.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isVisibleStart: true\n    });\n    this.props.generateBoard(this.props.history);\n  }\n\n  onKey(e) {\n    e.target.innerText = \"\";\n    let keycode = e.keyCode;\n\n    if (keycode > 64 && keycode < 91 || keycode > 185 && keycode < 193 || keycode > 218 && keycode < 223 || keycode == 48) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (keycode == 32 || keycode == 13) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (e.target.innerText.length === 1) {\n      e.preventDefault();\n    }\n  }\n\n  giveTip(e) {\n    e.preventDefault();\n    const _this$props = this.props,\n          board = _this$props.board,\n          getTip = _this$props.getTip;\n    this.setState({\n      isVisibleTip: true\n    });\n    this.setState({\n      isVisibleStart: false\n    });\n    this.setState({\n      isBlackFont: true\n    });\n    this.divRef.classList.remove(\"square\");\n    this.divRef.classList.add(\"square-black\");\n    getTip(board, this.state.history);\n  }\n\n  render() {\n    const board = this.props.board;\n    let isVisibleStart = this.state.isVisibleStart;\n    let isVisibleTip = this.state.isVisibleTip; // if(isVisibleTip) {\n    // }\n\n    const boardTip = this.props.boardTip;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      ref: el => this.divLeft = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, isVisibleStart && this.createBoard(board).slice(), isVisibleTip && this.createBoard(boardTip).slice()), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.giveTip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Tip\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSudoku.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardTip: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  boardTip: state.boardTip\n});\n\nexport default connect(mapStateToProps, {\n  generateBoard,\n  getTip\n})(Sudoku);","map":{"version":3,"sources":["/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js"],"names":["React","generateBoard","getTip","connect","PropTypes","Sudoku","Component","constructor","createBoard","table","result","x","i","length","j","children","k","push","el","divRef","onKey","state","boardTip","isVisibleStart","isVisibleTip","isBlackFont","giveTip","bind","componentDidMount","setState","props","history","e","target","innerText","keycode","keyCode","preventDefault","board","classList","remove","add","render","divLeft","slice","propTypes","array","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            boardTip: [],\n            isVisibleStart: false,\n            isVisibleTip: false,\n            isBlackFont: false\n        }\n        this.giveTip = this.giveTip.bind(this);\n        this.onKey = this.onKey.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ isVisibleStart: true });\n        this.props.generateBoard(this.props.history);\n    }\n\n    onKey(e) {\n        e.target.innerText = \"\";\n\n        let keycode = e.keyCode;\n        if(keycode > 64 && keycode < 91 || keycode > 185 && keycode < 193 ||\n            keycode > 218 && keycode < 223 || keycode == 48) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(keycode == 32 || keycode == 13) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(e.target.innerText.length === 1) {\n            e.preventDefault();\n        }\n    }\n\n    createBoard = (...table) => {\n        let result = [];\n        let x = 0;\n        for(let i=0; i<table.length; i++) {\n            for(let j=0; j<table[i].length; j++) {\n                let children = [];\n                for(let k=0; k<table[i][j].length; k++) {\n                    if(table[i][j][k] === 0) {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        className=\"square\"\n                                        contentEditable=\"true\"\n                                        onKeyDown={this.onKey}\n                                        // onKeyUp={this.onKey}\n                                        > \n                                    </div>);\n                    } else {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        className=\"square\"\n                                        // onKeyDown={this.onKey}\n                                        onKeyUp={this.onKey}\n                                        >\n                                            {/* <span className=\"field\">{ table[i][j][k] }</span>\n                                         */}\n                                         { table[i][j][k] }\n                                    </div>);\n                    }\n                }\n                result.push(children);\n                result.push(<div className=\"clear\"></div>);\n            }  \n        }\n        return result;\n    }\n\n    giveTip(e) {\n        e.preventDefault();\n        const { board, getTip } = this.props;\n        this.setState({ isVisibleTip: true })\n        this.setState({ isVisibleStart: false }); \n        this.setState({ isBlackFont: true });\n        this.divRef.classList.remove(\"square\");\n        this.divRef.classList.add(\"square-black\");\n        getTip(board, this.state.history);   \n    }\n\n    render() {\n        const { board } = this.props;\n        \n        let isVisibleStart = this.state.isVisibleStart;\n        let isVisibleTip = this.state.isVisibleTip;\n\n        // if(isVisibleTip) {\n            \n        // }\n        const { boardTip } = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"left\" ref={(el) => this.divLeft = el}>\n                    { isVisibleStart && this.createBoard(board).slice()}\n                    {isVisibleTip && this.createBoard(boardTip).slice()}\n                </div>\n                <div className=\"right\">\n                    <form onSubmit={this.giveTip}>\n                        <input type=\"submit\" value=\"Tip\" className=\"btnTip\" />\n                    </form>\n                </div>\n                <div className=\"clear\"></div>       \n            </div>\n        );\n    }\n}\n\nSudoku.propTypes = {\n    board: PropTypes.array.isRequired,\n    boardTip: PropTypes.array\n}\n\nconst mapStateToProps = state => ({\n    board: state.board,\n    boardTip: state.boardTip\n})\n\nexport default connect(mapStateToProps, { generateBoard, getTip })(Sudoku);"]},"metadata":{},"sourceType":"module"}