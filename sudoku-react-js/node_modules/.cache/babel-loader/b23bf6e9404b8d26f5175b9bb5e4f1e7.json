{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js\";\nimport React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { checkResult, checkResultTip } from '../actions/resultActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\n\nclass Sudoku extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = async function (event) {\n      console.log(this.state.value);\n      await this.setState({\n        value: event.target.value\n      });\n      console.log(this.state.value);\n    };\n\n    this.createBoard = (...table) => {\n      let result = [];\n      let _this$state = this.state,\n          isBlackFont = _this$state.isBlackFont,\n          isRedFont = _this$state.isRedFont;\n      let x = 0;\n\n      for (let a = 0; a < table.length; a++) {\n        for (let i = 0; i < table[a].length; i++) {\n          if (i === 0) {\n            for (let j = 0; j < table[a][i].length; j++) {\n              let children = [];\n\n              for (let k = 0; k < table[a][i][j].length; k++) {\n                let divsRef = React.createRef();\n                this.divs.push(divsRef);\n\n                if (table[a][i][j][k] === 0) {\n                  children.push(React.createElement(\"div\", {\n                    key: table[a][0][j][k],\n                    ref: divsRef // ref={(el) => {this.divs = el}} \n                    ,\n                    className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                    contentEditable: \"true\",\n                    onKeyDown: this.onKey,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 90\n                    },\n                    __self: this\n                  }));\n                  this.isEmptyDivArray.push(new coordinatesForEmptyCell(j, k));\n                  let divRef = React.createRef();\n                  this.divs.push(divRef);\n                } else {\n                  children.push(React.createElement(\"div\", {\n                    key: table[a][0][j][k] // ref={(el) => {this.divs = el}} \n                    ,\n                    ref: divsRef,\n                    className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                    onKeyDown: this.onKey,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 104\n                    },\n                    __self: this\n                  }, table[a][i][j][k]));\n                }\n              }\n\n              result.push(children);\n              result.push(React.createElement(\"div\", {\n                className: \"clear\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 117\n                },\n                __self: this\n              }));\n            }\n          }\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      boardTip: [],\n      isVisibleStart: false,\n      isVisibleTip: false,\n      isBlackFont: false,\n      isRedFont: true,\n      time: [],\n      username: '',\n      invalidUserName: false,\n      isEmptyCellsArray: [],\n      isFullFilledCellsArray: []\n    };\n    this.timerRef = React.createRef();\n    this.divs = [];\n    this.giveTip = this.giveTip.bind(this);\n    this.onKey = this.onKey.bind(this);\n    this.checkBoard = this.checkBoard.bind(this);\n    this.passTime = this.passTime.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.isEmptyDivArray = [];\n  }\n\n  componentDidMount() {\n    this.setState({\n      isVisibleStart: true\n    });\n    this.props.generateBoard(this.props.history);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onKey(e) {\n    e.target.innerText = \"\";\n    let keycode = e.keyCode;\n\n    if (keycode > 64 && keycode < 91 || keycode > 185 && keycode < 193 || keycode > 218 && keycode < 223 || keycode === 48) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (keycode === 32 || keycode === 13) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (e.target.innerText.length === 1) {\n      e.preventDefault();\n    }\n  }\n\n  passTime(newTime) {\n    this.state.time.push(newTime);\n  }\n\n  giveTip(e) {\n    e.preventDefault();\n    const _this$props = this.props,\n          board = _this$props.board,\n          getTip = _this$props.getTip;\n    let emptyBoard = board[0];\n    let solvedBoard = board[1];\n    let index = Math.floor(Math.random() * this.isEmptyDivArray.length);\n    let x = this.isEmptyDivArray[index].x;\n    let y = this.isEmptyDivArray[index].y;\n    console.log(\"x: \" + x);\n    console.log(\"y: \" + y);\n    this.setState({\n      isEmptyCellsArray: emptyBoard\n    }, function () {\n      console.log(this.state.isEmptyCellsArray);\n    });\n    this.setState({\n      isFullFilledCellsArray: solvedBoard\n    }, function () {\n      console.log(this.state.isFullFilledCellsArray);\n      let result = this.state.isFullFilledCellsArray[x][y];\n      console.log(result);\n      const newEmptyBoard = this.state.isEmptyCellsArray.slice();\n      newEmptyBoard[x][y] = result;\n      this.setState({\n        isEmptyCellsArray: newEmptyBoard\n      }, function () {\n        console.log(this.state.isEmptyCellsArray);\n      });\n      console.log(\"BOARD WITH EMPTY CELLS\");\n      console.log(this.state.isEmptyCellsArray);\n    });\n    this.setState({\n      isVisibleTip: true,\n      isVisibleStart: false,\n      isBlackFont: true,\n      isRedFont: false\n    });\n    console.log(\"refs\");\n    console.log(this.refs);\n\n    for (let ref in this.refs) {\n      console.log(ref);\n    }\n\n    console.log(\"length of this.divs[]: \" + this.divs.length);\n    console.log(this.divs);\n  }\n\n  checkBoard(e) {\n    e.preventDefault();\n\n    if (this.state.username.length === 0) {\n      this.setState({\n        invalidUserName: true\n      });\n      e.preventDefault();\n    }\n\n    let isTip = this.state.isVisibleTip;\n    this.timerRef.current.stopTime();\n    let time = this.state.time[0];\n    let userName = this.state.username;\n\n    if (isTip) {\n      this.props.checkResultTip(time, userName, this.props.history);\n    } else {\n      let fullFilledBoard = this.divs;\n      let processedBoard = this.processBoard(fullFilledBoard);\n      this.props.checkResult(processedBoard, time, userName, this.props.history);\n    }\n  }\n\n  create2DArray(rows) {\n    var array = [];\n\n    for (var i = 0; i < rows; i++) {\n      array[i] = [];\n    }\n\n    return array;\n  }\n\n  processBoard(...table) {\n    let result = this.create2DArray(9);\n    let rows = 0;\n    let columns = 0;\n\n    for (let i = 0; i < 81; i++) {\n      if (columns === 9) {\n        columns = 0;\n        rows++;\n      }\n\n      result[rows][columns] = table[0][i].innerText;\n      columns++;\n    }\n\n    return result;\n  }\n\n  render() {\n    const board = this.props.board; // const { boardTip } = this.props;\n\n    let _this$state2 = this.state,\n        isVisibleStart = _this$state2.isVisibleStart,\n        isVisibleTip = _this$state2.isVisibleTip;\n    let isEmptyCellsArray = this.state.isEmptyCellsArray;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      ref: el => this.divLeft = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"sizeh4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Game time: \", React.createElement(Timer, {\n      ref: this.timerRef,\n      onPassTime: this.passTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), isVisibleStart && this.createBoard(board).slice(), isVisibleTip && this.createBoard(isEmptyCellsArray).slice()), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"keyboard-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"sizeh3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"If you feel that you're stuck for too long check solution\"), React.createElement(\"form\", {\n      onSubmit: this.giveTip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Tip\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      onSubmit: this.checkBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"redFont\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Remember, input user name before send solution\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      id: \"username\",\n      className: \"inputUser\",\n      maxLength: \"22\",\n      ref: el => this.userNameRef = el,\n      onChange: this.onChange,\n      value: this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Check board\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), React.createElement(ShowInvalidUserName, {\n      invalidUserName: this.state.invalidUserName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction ShowInvalidUserName(props) {\n  if (props.invalidUserName) {\n    return React.createElement(\"div\", {\n      className: \"alert alert-danger invalidUser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"You forgot input your user name. Try again...\");\n  }\n\n  return null;\n}\n\nfunction coordinatesForEmptyCell(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nSudoku.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardTip: PropTypes.array,\n  result: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  boardTip: state.boardTip,\n  result: state.result\n});\n\nexport default connect(mapStateToProps, {\n  generateBoard,\n  getTip,\n  checkResult,\n  checkResultTip\n})(Sudoku);","map":{"version":3,"sources":["/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js"],"names":["React","generateBoard","getTip","checkResult","checkResultTip","connect","PropTypes","Timer","Sudoku","Component","constructor","props","handleChange","event","console","log","state","value","setState","target","createBoard","table","result","isBlackFont","isRedFont","x","a","length","i","j","children","k","divsRef","createRef","divs","push","filter","e","join","onKey","isEmptyDivArray","coordinatesForEmptyCell","divRef","boardTip","isVisibleStart","isVisibleTip","time","username","invalidUserName","isEmptyCellsArray","isFullFilledCellsArray","timerRef","giveTip","bind","checkBoard","passTime","onChange","componentDidMount","history","name","innerText","keycode","keyCode","preventDefault","newTime","board","emptyBoard","solvedBoard","index","Math","floor","random","y","newEmptyBoard","slice","refs","ref","isTip","current","stopTime","userName","fullFilledBoard","processedBoard","processBoard","create2DArray","rows","array","columns","render","el","divLeft","userNameRef","ShowInvalidUserName","propTypes","isRequired","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,0BAA5C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,MAAN,SAAqBR,KAAK,CAACS,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAuDnBC,YAvDmB,GAuDJ,gBAAeC,KAAf,EAAsB;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,KAAvB;AACA,YAAM,KAAKC,QAAL,CAAc;AAACD,QAAAA,KAAK,EAAEJ,KAAK,CAACM,MAAN,CAAaF;AAArB,OAAd,CAAN;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,KAAvB;AACH,KA3DkB;;AAAA,SAiEnBG,WAjEmB,GAiEL,CAAC,GAAGC,KAAJ,KAAc;AACxB,UAAIC,MAAM,GAAG,EAAb;AADwB,wBAES,KAAKN,KAFd;AAAA,UAElBO,WAFkB,eAElBA,WAFkB;AAAA,UAELC,SAFK,eAELA,SAFK;AAGxB,UAAIC,CAAC,GAAG,CAAR;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,KAAK,CAACM,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAC9B,aAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACP,KAAK,CAACK,CAAD,CAAL,CAASC,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACjC,cAAGA,CAAC,KAAK,CAAT,EAAY;AACR,iBAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACR,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,EAAYD,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;AACpC,kBAAIC,QAAQ,GAAG,EAAf;;AAEA,mBAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACV,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,EAAYC,CAAZ,EAAeF,MAA9B,EAAsCI,CAAC,EAAvC,EAA2C;AACvC,oBAAIC,OAAO,GAAGhC,KAAK,CAACiC,SAAN,EAAd;AACA,qBAAKC,IAAL,CAAUC,IAAV,CAAeH,OAAf;;AAEA,oBAAGX,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,EAAYC,CAAZ,EAAeE,CAAf,MAAsB,CAAzB,EAA4B;AACxBD,kBAAAA,QAAQ,CAACK,IAAT,CAAc;AACE,oBAAA,GAAG,EAAEd,KAAK,CAACK,CAAD,CAAL,CAAS,CAAT,EAAYG,CAAZ,EAAeE,CAAf,CADP;AAEE,oBAAA,GAAG,EAAEC,OAFP,CAGE;AAHF;AAIE,oBAAA,SAAS,EAAE,CAACT,WAAW,IAAI,cAAhB,EAAgCC,SAAS,IAAI,QAA7C,EACEY,MADF,CACSC,CAAC,IAAI,CAAC,CAACA,CADhB,EACmBC,IADnB,CACwB,GADxB,CAJb;AAME,oBAAA,eAAe,EAAC,MANlB;AAOE,oBAAA,SAAS,EAAE,KAAKC,KAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAd;AAUA,uBAAKC,eAAL,CAAqBL,IAArB,CAA0B,IAAIM,uBAAJ,CAA4BZ,CAA5B,EAA+BE,CAA/B,CAA1B;AACA,sBAAIW,MAAM,GAAG1C,KAAK,CAACiC,SAAN,EAAb;AACA,uBAAKC,IAAL,CAAUC,IAAV,CAAeO,MAAf;AACH,iBAdD,MAcO;AACHZ,kBAAAA,QAAQ,CAACK,IAAT,CAAc;AACE,oBAAA,GAAG,EAAEd,KAAK,CAACK,CAAD,CAAL,CAAS,CAAT,EAAYG,CAAZ,EAAeE,CAAf,CADP,CAEE;AAFF;AAGE,oBAAA,GAAG,EAAEC,OAHP;AAIE,oBAAA,SAAS,EAAE,CAACT,WAAW,IAAI,cAAhB,EAAgCC,SAAS,IAAI,QAA7C,EACEY,MADF,CACSC,CAAC,IAAI,CAAC,CAACA,CADhB,EACmBC,IADnB,CACwB,GADxB,CAJb;AAME,oBAAA,SAAS,EAAE,KAAKC,KANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAQKlB,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,EAAYC,CAAZ,EAAeE,CAAf,CARL,CAAd;AAUH;AACJ;;AACDT,cAAAA,MAAM,CAACa,IAAP,CAAYL,QAAZ;AACAR,cAAAA,MAAM,CAACa,IAAP,CAAY;AAAK,gBAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAZ;AACH;AACJ;AACJ;AACJ;;AACD,aAAOb,MAAP;AACH,KAjHkB;;AAGf,SAAKN,KAAL,GAAa;AACT2B,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,cAAc,EAAE,KAFP;AAGTC,MAAAA,YAAY,EAAE,KAHL;AAITtB,MAAAA,WAAW,EAAE,KAJJ;AAKTC,MAAAA,SAAS,EAAE,IALF;AAMTsB,MAAAA,IAAI,EAAE,EANG;AAOTC,MAAAA,QAAQ,EAAE,EAPD;AAQTC,MAAAA,eAAe,EAAE,KARR;AASTC,MAAAA,iBAAiB,EAAE,EATV;AAUTC,MAAAA,sBAAsB,EAAE;AAVf,KAAb;AAYA,SAAKC,QAAL,GAAgBnD,KAAK,CAACiC,SAAN,EAAhB;AAEA,SAAKC,IAAL,GAAY,EAAZ;AAEA,SAAKkB,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKd,KAAL,GAAa,KAAKA,KAAL,CAAWc,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AAEA,SAAKb,eAAL,GAAuB,EAAvB;AACH;;AAEDiB,EAAAA,iBAAiB,GAAG;AAChB,SAAKvC,QAAL,CAAc;AAAE0B,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACA,SAAKjC,KAAL,CAAWV,aAAX,CAAyB,KAAKU,KAAL,CAAW+C,OAApC;AACH;;AAEDF,EAAAA,QAAQ,CAACnB,CAAD,EAAI;AACR,SAAKnB,QAAL,CAAc;AAAE,OAACmB,CAAC,CAAClB,MAAF,CAASwC,IAAV,GAAiBtB,CAAC,CAAClB,MAAF,CAASF;AAA5B,KAAd;AACH;;AAEDsB,EAAAA,KAAK,CAACF,CAAD,EAAI;AACLA,IAAAA,CAAC,CAAClB,MAAF,CAASyC,SAAT,GAAqB,EAArB;AAEA,QAAIC,OAAO,GAAGxB,CAAC,CAACyB,OAAhB;;AACA,QAAID,OAAO,GAAG,EAAV,IAAgBA,OAAO,GAAG,EAA3B,IAAmCA,OAAO,GAAG,GAAV,IAAiBA,OAAO,GAAG,GAA9D,IACEA,OAAO,GAAG,GAAV,IAAiBA,OAAO,GAAG,GAD7B,IACqCA,OAAO,KAAK,EADpD,EACwD;AACpDxB,MAAAA,CAAC,CAAC0B,cAAF;AACA1B,MAAAA,CAAC,CAAClB,MAAF,CAASyC,SAAT,GAAqB,EAArB;AACH;;AACD,QAAGC,OAAO,KAAK,EAAZ,IAAkBA,OAAO,KAAK,EAAjC,EAAqC;AACjCxB,MAAAA,CAAC,CAAC0B,cAAF;AACA1B,MAAAA,CAAC,CAAClB,MAAF,CAASyC,SAAT,GAAqB,EAArB;AACH;;AACD,QAAGvB,CAAC,CAAClB,MAAF,CAASyC,SAAT,CAAmBjC,MAAnB,KAA8B,CAAjC,EAAoC;AAChCU,MAAAA,CAAC,CAAC0B,cAAF;AACH;AACJ;;AAQDR,EAAAA,QAAQ,CAACS,OAAD,EAAU;AACd,SAAKhD,KAAL,CAAW8B,IAAX,CAAgBX,IAAhB,CAAqB6B,OAArB;AACH;;AAoDDZ,EAAAA,OAAO,CAACf,CAAD,EAAI;AACPA,IAAAA,CAAC,CAAC0B,cAAF;AADO,wBAGmB,KAAKpD,KAHxB;AAAA,UAGCsD,KAHD,eAGCA,KAHD;AAAA,UAGQ/D,MAHR,eAGQA,MAHR;AAKP,QAAIgE,UAAU,GAAGD,KAAK,CAAC,CAAD,CAAtB;AACA,QAAIE,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAvB;AAEA,QAAIG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAK/B,eAAL,CAAqBb,MAAhD,CAAZ;AACA,QAAIF,CAAC,GAAG,KAAKe,eAAL,CAAqB4B,KAArB,EAA4B3C,CAApC;AACA,QAAI+C,CAAC,GAAG,KAAKhC,eAAL,CAAqB4B,KAArB,EAA4BI,CAApC;AAEA1D,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAQU,CAApB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAQyD,CAApB;AAEA,SAAKtD,QAAL,CAAc;AAAE+B,MAAAA,iBAAiB,EAAEiB;AAArB,KAAd,EAAiD,YAAW;AACxDpD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWiC,iBAAvB;AACH,KAFD;AAIA,SAAK/B,QAAL,CAAc;AAAEgC,MAAAA,sBAAsB,EAAEiB;AAA1B,KAAd,EAAuD,YAAW;AAC9DrD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWkC,sBAAvB;AACA,UAAI5B,MAAM,GAAG,KAAKN,KAAL,CAAWkC,sBAAX,CAAkCzB,CAAlC,EAAqC+C,CAArC,CAAb;AACA1D,MAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AAEA,YAAMmD,aAAa,GAAG,KAAKzD,KAAL,CAAWiC,iBAAX,CAA6ByB,KAA7B,EAAtB;AACAD,MAAAA,aAAa,CAAChD,CAAD,CAAb,CAAiB+C,CAAjB,IAAsBlD,MAAtB;AACA,WAAKJ,QAAL,CAAc;AAAE+B,QAAAA,iBAAiB,EAAEwB;AAArB,OAAd,EAAoD,YAAW;AAC3D3D,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWiC,iBAAvB;AACH,OAFD;AAGAnC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWiC,iBAAvB;AACH,KAZD;AAcA,SAAK/B,QAAL,CAAc;AACV2B,MAAAA,YAAY,EAAE,IADJ;AAEVD,MAAAA,cAAc,EAAE,KAFN;AAGVrB,MAAAA,WAAW,EAAE,IAHH;AAIVC,MAAAA,SAAS,EAAE;AAJD,KAAd;AAMAV,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK4D,IAAjB;;AAEA,SAAI,IAAIC,GAAR,IAAe,KAAKD,IAApB,EAA0B;AACtB7D,MAAAA,OAAO,CAACC,GAAR,CAAY6D,GAAZ;AACH;;AAED9D,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4B,KAAKmB,IAAL,CAAUP,MAAlD;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKmB,IAAjB;AACH;;AAEDoB,EAAAA,UAAU,CAACjB,CAAD,EAAI;AACVA,IAAAA,CAAC,CAAC0B,cAAF;;AAEA,QAAG,KAAK/C,KAAL,CAAW+B,QAAX,CAAoBpB,MAApB,KAA+B,CAAlC,EAAqC;AACjC,WAAKT,QAAL,CAAc;AAAE8B,QAAAA,eAAe,EAAE;AAAnB,OAAd;AACAX,MAAAA,CAAC,CAAC0B,cAAF;AACH;;AAED,QAAIc,KAAK,GAAG,KAAK7D,KAAL,CAAW6B,YAAvB;AACA,SAAKM,QAAL,CAAc2B,OAAd,CAAsBC,QAAtB;AAEA,QAAIjC,IAAI,GAAG,KAAK9B,KAAL,CAAW8B,IAAX,CAAgB,CAAhB,CAAX;AACA,QAAIkC,QAAQ,GAAG,KAAKhE,KAAL,CAAW+B,QAA1B;;AAEA,QAAG8B,KAAH,EAAU;AACN,WAAKlE,KAAL,CAAWP,cAAX,CAA0B0C,IAA1B,EAAgCkC,QAAhC,EAA0C,KAAKrE,KAAL,CAAW+C,OAArD;AACH,KAFD,MAEO;AACH,UAAIuB,eAAe,GAAG,KAAK/C,IAA3B;AACA,UAAIgD,cAAc,GAAG,KAAKC,YAAL,CAAkBF,eAAlB,CAArB;AAEA,WAAKtE,KAAL,CAAWR,WAAX,CAAuB+E,cAAvB,EAAuCpC,IAAvC,EAA6CkC,QAA7C,EAAuD,KAAKrE,KAAL,CAAW+C,OAAlE;AACH;AACJ;;AAED0B,EAAAA,aAAa,CAACC,IAAD,EAAO;AAChB,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAI1D,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACyD,IAAf,EAAoBzD,CAAC,EAArB,EAAyB;AACtB0D,MAAAA,KAAK,CAAC1D,CAAD,CAAL,GAAW,EAAX;AACF;;AACD,WAAO0D,KAAP;AACD;;AAEHH,EAAAA,YAAY,CAAC,GAAG9D,KAAJ,EAAW;AACnB,QAAIC,MAAM,GAAG,KAAK8D,aAAL,CAAmB,CAAnB,CAAb;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIE,OAAO,GAAG,CAAd;;AACA,SAAI,IAAI3D,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,EAAf,EAAmBA,CAAC,EAApB,EAAwB;AACpB,UAAG2D,OAAO,KAAK,CAAf,EAAkB;AACdA,QAAAA,OAAO,GAAG,CAAV;AACAF,QAAAA,IAAI;AACP;;AACD/D,MAAAA,MAAM,CAAC+D,IAAD,CAAN,CAAaE,OAAb,IAAwBlE,KAAK,CAAC,CAAD,CAAL,CAASO,CAAT,EAAYgC,SAApC;AACA2B,MAAAA,OAAO;AACV;;AACD,WAAOjE,MAAP;AACH;;AAEDkE,EAAAA,MAAM,GAAG;AAAA,UACGvB,KADH,GACa,KAAKtD,KADlB,CACGsD,KADH,EAEL;;AAFK,uBAGkC,KAAKjD,KAHvC;AAAA,QAGC4B,cAHD,gBAGCA,cAHD;AAAA,QAGiBC,YAHjB,gBAGiBA,YAHjB;AAIL,QAAII,iBAAiB,GAAG,KAAKjC,KAAL,CAAWiC,iBAAnC;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,GAAG,EAAGwC,EAAD,IAAQ,KAAKC,OAAL,GAAeD,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAkC,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,KAAKtC,QAAjB;AAA2B,MAAA,UAAU,EAAE,KAAKI,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlC,CADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGMX,cAAc,IAAI,KAAKxB,WAAL,CAAiB6C,KAAjB,EAAwBS,KAAxB,EAHxB,EAIK7B,YAAY,IAAI,KAAKzB,WAAL,CAAiB6B,iBAAjB,EAAoCyB,KAApC,EAJrB,CADJ,EAOI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEADJ,EAGI;AAAM,MAAA,QAAQ,EAAE,KAAKtB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,KAA3B;AAAiC,MAAA,SAAS,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAHJ,EAOI;AAAM,MAAA,QAAQ,EAAE,KAAKE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDADJ,EAEI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,EAAE,EAAC,UAHP;AAII,MAAA,SAAS,EAAC,WAJd;AAKI,MAAA,SAAS,EAAC,IALd;AAMI,MAAA,GAAG,EAAGmC,EAAD,IAAQ,KAAKE,WAAL,GAAmBF,EANpC;AAOI,MAAA,QAAQ,EAAE,KAAKjC,QAPnB;AAQI,MAAA,KAAK,EAAE,KAAKxC,KAAL,CAAW+B,QARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,EAaI;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,EAeI;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,KAAK,EAAC,aAFV;AAGI,MAAA,SAAS,EAAC,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,CAPJ,CADJ,CAPJ,EAsCI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCJ,EAuCI,oBAAC,mBAAD;AAAqB,MAAA,eAAe,EAAE,KAAK/B,KAAL,CAAWgC,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCJ,CADJ;AA2CH;;AAtQgC;;AAyQrC,SAAS4C,mBAAT,CAA6BjF,KAA7B,EAAoC;AAChC,MAAGA,KAAK,CAACqC,eAAT,EAA0B;AACtB,WACI;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDADJ;AAGH;;AACD,SAAO,IAAP;AACH;;AAED,SAASP,uBAAT,CAAiChB,CAAjC,EAAoC+C,CAApC,EAAuC;AACnC,OAAK/C,CAAL,GAASA,CAAT;AACA,OAAK+C,CAAL,GAASA,CAAT;AACH;;AAEDhE,MAAM,CAACqF,SAAP,GAAmB;AACf5B,EAAAA,KAAK,EAAE3D,SAAS,CAACgF,KAAV,CAAgBQ,UADR;AAEfnD,EAAAA,QAAQ,EAAErC,SAAS,CAACgF,KAFL;AAGfhE,EAAAA,MAAM,EAAEhB,SAAS,CAACgF;AAHH,CAAnB;;AAMA,MAAMS,eAAe,GAAG/E,KAAK,KAAK;AAC9BiD,EAAAA,KAAK,EAAEjD,KAAK,CAACiD,KADiB;AAE9BtB,EAAAA,QAAQ,EAAE3B,KAAK,CAAC2B,QAFc;AAG9BrB,EAAAA,MAAM,EAAEN,KAAK,CAACM;AAHgB,CAAL,CAA7B;;AAMA,eAAejB,OAAO,CAAC0F,eAAD,EAAkB;AAAE9F,EAAAA,aAAF;AACpCC,EAAAA,MADoC;AAC5BC,EAAAA,WAD4B;AACfC,EAAAA;AADe,CAAlB,CAAP,CAC4BI,MAD5B,CAAf","sourcesContent":["import React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { checkResult, checkResultTip } from '../actions/resultActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\n\nclass Sudoku extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            boardTip: [],\n            isVisibleStart: false,\n            isVisibleTip: false,\n            isBlackFont: false,\n            isRedFont: true,\n            time: [],\n            username: '',\n            invalidUserName: false,\n            isEmptyCellsArray: [],\n            isFullFilledCellsArray: []\n        }\n        this.timerRef = React.createRef();\n\n        this.divs = [];\n\n        this.giveTip = this.giveTip.bind(this);\n        this.onKey = this.onKey.bind(this);\n        this.checkBoard = this.checkBoard.bind(this);\n        this.passTime = this.passTime.bind(this);\n        this.onChange = this.onChange.bind(this);\n\n        this.isEmptyDivArray = [];\n    }\n\n    componentDidMount() {\n        this.setState({ isVisibleStart: true });\n        this.props.generateBoard(this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onKey(e) {\n        e.target.innerText = \"\";\n\n        let keycode = e.keyCode;\n        if((keycode > 64 && keycode < 91) || (keycode > 185 && keycode < 193) ||\n            (keycode > 218 && keycode < 223) || keycode === 48) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(keycode === 32 || keycode === 13) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(e.target.innerText.length === 1) {\n            e.preventDefault();\n        }\n    }\n\n    handleChange = async function(event) {\n        console.log(this.state.value);\n        await this.setState({value: event.target.value});\n        console.log(this.state.value);\n    }\n\n    passTime(newTime) {\n        this.state.time.push(newTime)\n    }\n\n    createBoard = (...table) => {\n        let result = [];\n        let { isBlackFont, isRedFont } = this.state;\n        let x = 0;\n        for(let a=0; a<table.length; a++) {\n            for(let i=0; i<table[a].length; i++) {\n                if(i === 0) {\n                    for(let j=0; j<table[a][i].length; j++) {\n                        let children = [];\n        \n                        for(let k=0; k<table[a][i][j].length; k++) {\n                            let divsRef = React.createRef();\n                            this.divs.push(divsRef);\n\n                            if(table[a][i][j][k] === 0) {\n                                children.push(<div \n                                                key={table[a][0][j][k]} \n                                                ref={divsRef} \n                                                // ref={(el) => {this.divs = el}} \n                                                className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                            .filter(e => !!e).join(' ')}\n                                                contentEditable=\"true\"\n                                                onKeyDown={this.onKey}\n                                                > \n                                            </div>);\n                                this.isEmptyDivArray.push(new coordinatesForEmptyCell(j, k));\n                                let divRef = React.createRef();\n                                this.divs.push(divRef);\n                            } else {\n                                children.push(<div \n                                                key={table[a][0][j][k]} \n                                                // ref={(el) => {this.divs = el}} \n                                                ref={divsRef} \n                                                className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                            .filter(e => !!e).join(' ')}\n                                                onKeyDown={this.onKey}\n                                                >\n                                                 { table[a][i][j][k] }\n                                            </div>);\n                            }\n                        }\n                        result.push(children);\n                        result.push(<div className=\"clear\"></div>);\n                    }\n                }             \n            }\n        }\n        return result;\n    }\n\n    giveTip(e) {\n        e.preventDefault();\n\n        const { board, getTip } = this.props;\n\n        let emptyBoard = board[0];\n        let solvedBoard = board[1];\n\n        let index = Math.floor(Math.random() * this.isEmptyDivArray.length);\n        let x = this.isEmptyDivArray[index].x;\n        let y = this.isEmptyDivArray[index].y;\n\n        console.log(\"x: \" + x);\n        console.log(\"y: \" + y);\n\n        this.setState({ isEmptyCellsArray: emptyBoard }, function() {\n            console.log(this.state.isEmptyCellsArray);\n        });\n\n        this.setState({ isFullFilledCellsArray: solvedBoard }, function() {\n            console.log(this.state.isFullFilledCellsArray);\n            let result = this.state.isFullFilledCellsArray[x][y];\n            console.log(result);\n            \n            const newEmptyBoard = this.state.isEmptyCellsArray.slice();\n            newEmptyBoard[x][y] = result;\n            this.setState({ isEmptyCellsArray: newEmptyBoard }, function() {\n                console.log(this.state.isEmptyCellsArray);\n            });\n            console.log(\"BOARD WITH EMPTY CELLS\");\n            console.log(this.state.isEmptyCellsArray);\n        });\n\n        this.setState({ \n            isVisibleTip: true,\n            isVisibleStart: false,\n            isBlackFont: true,\n            isRedFont: false\n        });    \n        console.log(\"refs\");\n        console.log(this.refs);\n\n        for(let ref in this.refs) {\n            console.log(ref);\n        }\n\n        console.log(\"length of this.divs[]: \" + this.divs.length);\n        console.log(this.divs);\n    }\n\n    checkBoard(e) {\n        e.preventDefault();\n\n        if(this.state.username.length === 0) {\n            this.setState({ invalidUserName: true });\n            e.preventDefault();\n        }\n\n        let isTip = this.state.isVisibleTip;\n        this.timerRef.current.stopTime();\n\n        let time = this.state.time[0];\n        let userName = this.state.username;\n\n        if(isTip) {\n            this.props.checkResultTip(time, userName, this.props.history);\n        } else {\n            let fullFilledBoard = this.divs;\n            let processedBoard = this.processBoard(fullFilledBoard);\n\n            this.props.checkResult(processedBoard, time, userName, this.props.history);\n        }\n    }\n\n    create2DArray(rows) {\n        var array = [];   \n        for (var i=0;i<rows;i++) {\n           array[i] = [];\n        }\n        return array;\n      }\n\n    processBoard(...table) {\n        let result = this.create2DArray(9);\n        let rows = 0;\n        let columns = 0;\n        for(let i=0; i<81; i++) {\n            if(columns === 9) {\n                columns = 0;\n                rows++;\n            }\n            result[rows][columns] = table[0][i].innerText;\n            columns++;\n        }\n        return result;\n    }\n\n    render() {\n        const { board } = this.props;\n        // const { boardTip } = this.props;\n        let { isVisibleStart, isVisibleTip } = this.state;\n        let isEmptyCellsArray = this.state.isEmptyCellsArray;\n\n        return (\n            <div className=\"container\">\n                <div className=\"left\" ref={(el) => this.divLeft = el}>\n                <h4 className=\"sizeh4\">Game time: <Timer ref={this.timerRef} onPassTime={this.passTime} /></h4>\n                <br />\n                    { isVisibleStart && this.createBoard(board).slice()}\n                    {isVisibleTip && this.createBoard(isEmptyCellsArray).slice()}\n                </div>\n                <div className=\"right\">\n                    <div className=\"keyboard-control\">\n                        <h3 className=\"sizeh3\">If you feel that you're stuck for too long check solution</h3>\n                        \n                        <form onSubmit={this.giveTip}>\n                            <input type=\"submit\" value=\"Tip\" className=\"btnTip\" />\n                        </form>\n\n                        <form onSubmit={this.checkBoard} >\n                            <h5 className=\"redFont\">Remember, input user name before send solution</h5>\n                            <input \n                                type=\"text\" \n                                name=\"username\" \n                                id=\"username\" \n                                className=\"inputUser\" \n                                maxLength=\"22\"\n                                ref={(el) => this.userNameRef = el}\n                                onChange={this.onChange}\n                                value={this.state.username}\n                            />\n                            <br />\n                            <label htmlFor=\"username\">Username</label>\n                            <br />\n                            <input \n                                type=\"submit\" \n                                value=\"Check board\" \n                                className=\"btnTip\" \n                            />\n                        </form>\n                    </div>\n                </div>\n                <div className=\"clear\"></div> \n                <ShowInvalidUserName invalidUserName={this.state.invalidUserName} />\n            </div>\n        );\n    }\n}\n\nfunction ShowInvalidUserName(props) {\n    if(props.invalidUserName) {\n        return (\n            <div className=\"alert alert-danger invalidUser\">You forgot input your user name. Try again...</div>\n        );\n    }\n    return null;\n}\n\nfunction coordinatesForEmptyCell(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nSudoku.propTypes = {\n    board: PropTypes.array.isRequired,\n    boardTip: PropTypes.array,\n    result: PropTypes.array\n}\n\nconst mapStateToProps = state => ({\n    board: state.board,\n    boardTip: state.boardTip,\n    result: state.result\n})\n\nexport default connect(mapStateToProps, { generateBoard, \n    getTip, checkResult, checkResultTip })(Sudoku);"]},"metadata":{},"sourceType":"module"}