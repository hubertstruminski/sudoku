{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js\";\nimport React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n  constructor() {\n    super();\n\n    this.createBoard = (...table) => {\n      let result = [];\n      let _this$state = this.state,\n          isBlackFont = _this$state.isBlackFont,\n          isRedFont = _this$state.isRedFont;\n\n      for (let i = 0; i < table.length; i++) {\n        for (let j = 0; j < table[i].length; j++) {\n          let children = [];\n\n          for (let k = 0; k < table[i][j].length; k++) {\n            if (table[i][j][k] === 0) {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                contentEditable: \"true\",\n                onKeyDown: this.onKey,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 58\n                },\n                __self: this\n              }));\n            } else {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                onKeyUp: this.onKey,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 68\n                },\n                __self: this\n              }, table[i][j][k]));\n            }\n          }\n\n          result.push(children);\n          result.push(React.createElement(\"div\", {\n            className: \"clear\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }));\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      boardTip: [],\n      isVisibleStart: false,\n      isVisibleTip: false,\n      isBlackFont: false,\n      isRedFont: true\n    };\n    this.giveTip = this.giveTip.bind(this);\n    this.onKey = this.onKey.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isVisibleStart: true\n    });\n    this.startTimer();\n    this.props.generateBoard(this.props.history);\n  }\n\n  onKey(e) {\n    e.target.innerText = \"\";\n    let keycode = e.keyCode;\n\n    if (keycode > 64 && keycode < 91 || keycode > 185 && keycode < 193 || keycode > 218 && keycode < 223 || keycode == 48) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (keycode == 32 || keycode == 13) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (e.target.innerText.length === 1) {\n      e.preventDefault();\n    }\n  }\n\n  giveTip(e) {\n    e.preventDefault();\n    const _this$props = this.props,\n          board = _this$props.board,\n          getTip = _this$props.getTip;\n    this.setState({\n      isVisibleTip: true,\n      isVisibleStart: false,\n      isBlackFont: true,\n      isRedFont: false\n    });\n    getTip(board, this.state.history);\n  }\n\n  render() {\n    const board = this.props.board;\n    const boardTip = this.props.boardTip;\n    let _this$state2 = this.state,\n        isVisibleStart = _this$state2.isVisibleStart,\n        isVisibleTip = _this$state2.isVisibleTip,\n        time = _this$state2.time;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      ref: el => this.divLeft = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Game time: \", time, isVisibleStart && this.createBoard(board).slice(), isVisibleTip && this.createBoard(boardTip).slice()), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.giveTip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Tip\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSudoku.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardTip: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  boardTip: state.boardTip\n});\n\nexport default connect(mapStateToProps, {\n  generateBoard,\n  getTip\n})(Sudoku);","map":{"version":3,"sources":["/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js"],"names":["React","generateBoard","getTip","connect","PropTypes","Sudoku","Component","constructor","createBoard","table","result","state","isBlackFont","isRedFont","i","length","j","children","k","push","el","divRef","filter","e","join","onKey","boardTip","isVisibleStart","isVisibleTip","giveTip","bind","startTimer","stopTimer","componentDidMount","setState","props","history","target","innerText","keycode","keyCode","preventDefault","board","render","time","divLeft","slice","propTypes","array","isRequired","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,GAAG;AACV;;AADU,SAyCdC,WAzCc,GAyCA,CAAC,GAAGC,KAAJ,KAAc;AACxB,UAAIC,MAAM,GAAG,EAAb;AADwB,wBAES,KAAKC,KAFd;AAAA,UAElBC,WAFkB,eAElBA,WAFkB;AAAA,UAELC,SAFK,eAELA,SAFK;;AAIxB,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,KAAK,CAACM,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAC9B,aAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACP,KAAK,CAACK,CAAD,CAAL,CAASC,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACjC,cAAIC,QAAQ,GAAG,EAAf;;AACA,eAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACT,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,EAAYD,MAA3B,EAAmCG,CAAC,EAApC,EAAwC;AACpC,gBAAGT,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,EAAYE,CAAZ,MAAmB,CAAtB,EAAyB;AACrBD,cAAAA,QAAQ,CAACE,IAAT,CAAc;AACE,gBAAA,GAAG,EAAEV,KAAK,CAAC,CAAD,CAAL,CAASO,CAAT,EAAYE,CAAZ,CADP;AAEE,gBAAA,GAAG,EAAGE,EAAD,IAAQ,KAAKC,MAAL,GAAcD,EAF7B;AAGE,gBAAA,SAAS,EAAE,CAACR,WAAW,IAAI,cAAhB,EAAgCC,SAAS,IAAI,QAA7C,EACES,MADF,CACSC,CAAC,IAAI,CAAC,CAACA,CADhB,EACmBC,IADnB,CACwB,GADxB,CAHb;AAKE,gBAAA,eAAe,EAAC,MALlB;AAME,gBAAA,SAAS,EAAE,KAAKC,KANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAd;AASH,aAVD,MAUO;AACHR,cAAAA,QAAQ,CAACE,IAAT,CAAc;AACE,gBAAA,GAAG,EAAEV,KAAK,CAAC,CAAD,CAAL,CAASO,CAAT,EAAYE,CAAZ,CADP;AAEE,gBAAA,GAAG,EAAGE,EAAD,IAAQ,KAAKC,MAAL,GAAcD,EAF7B;AAGE,gBAAA,SAAS,EAAE,CAACR,WAAW,IAAI,cAAhB,EAAgCC,SAAS,IAAI,QAA7C,EACES,MADF,CACSC,CAAC,IAAI,CAAC,CAACA,CADhB,EACmBC,IADnB,CACwB,GADxB,CAHb;AAKE,gBAAA,OAAO,EAAE,KAAKC,KALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAOKhB,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,EAAYE,CAAZ,CAPL,CAAd;AASH;AACJ;;AACDR,UAAAA,MAAM,CAACS,IAAP,CAAYF,QAAZ;AACAP,UAAAA,MAAM,CAACS,IAAP,CAAY;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ;AACH;AACJ;;AACD,aAAOT,MAAP;AACH,KA5Ea;;AAGV,SAAKC,KAAL,GAAa;AACTe,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,cAAc,EAAE,KAFP;AAGTC,MAAAA,YAAY,EAAE,KAHL;AAIThB,MAAAA,WAAW,EAAE,KAJJ;AAKTC,MAAAA,SAAS,EAAE;AALF,KAAb;AAOA,SAAKgB,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKL,KAAL,GAAa,KAAKA,KAAL,CAAWK,IAAX,CAAgB,IAAhB,CAAb;AAEA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;AACH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,CAAc;AAAEP,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACA,SAAKI,UAAL;AACA,SAAKI,KAAL,CAAWlC,aAAX,CAAyB,KAAKkC,KAAL,CAAWC,OAApC;AACH;;AAEDX,EAAAA,KAAK,CAACF,CAAD,EAAI;AACLA,IAAAA,CAAC,CAACc,MAAF,CAASC,SAAT,GAAqB,EAArB;AAEA,QAAIC,OAAO,GAAGhB,CAAC,CAACiB,OAAhB;;AACA,QAAGD,OAAO,GAAG,EAAV,IAAgBA,OAAO,GAAG,EAA1B,IAAgCA,OAAO,GAAG,GAAV,IAAiBA,OAAO,GAAG,GAA3D,IACCA,OAAO,GAAG,GAAV,IAAiBA,OAAO,GAAG,GAD5B,IACmCA,OAAO,IAAI,EADjD,EACqD;AACjDhB,MAAAA,CAAC,CAACkB,cAAF;AACAlB,MAAAA,CAAC,CAACc,MAAF,CAASC,SAAT,GAAqB,EAArB;AACH;;AACD,QAAGC,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAA/B,EAAmC;AAC/BhB,MAAAA,CAAC,CAACkB,cAAF;AACAlB,MAAAA,CAAC,CAACc,MAAF,CAASC,SAAT,GAAqB,EAArB;AACH;;AACD,QAAGf,CAAC,CAACc,MAAF,CAASC,SAAT,CAAmBvB,MAAnB,KAA8B,CAAjC,EAAoC;AAChCQ,MAAAA,CAAC,CAACkB,cAAF;AACH;AACJ;;AAuCDZ,EAAAA,OAAO,CAACN,CAAD,EAAI;AACPA,IAAAA,CAAC,CAACkB,cAAF;AADO,wBAEmB,KAAKN,KAFxB;AAAA,UAECO,KAFD,eAECA,KAFD;AAAA,UAEQxC,MAFR,eAEQA,MAFR;AAGP,SAAKgC,QAAL,CAAc;AACVN,MAAAA,YAAY,EAAE,IADJ;AAEVD,MAAAA,cAAc,EAAE,KAFN;AAGVf,MAAAA,WAAW,EAAE,IAHH;AAIVC,MAAAA,SAAS,EAAE;AAJD,KAAd;AAMAX,IAAAA,MAAM,CAACwC,KAAD,EAAQ,KAAK/B,KAAL,CAAWyB,OAAnB,CAAN;AACH;;AAEDO,EAAAA,MAAM,GAAG;AAAA,UACGD,KADH,GACa,KAAKP,KADlB,CACGO,KADH;AAAA,UAEGhB,QAFH,GAEgB,KAAKS,KAFrB,CAEGT,QAFH;AAAA,uBAGwC,KAAKf,KAH7C;AAAA,QAGCgB,cAHD,gBAGCA,cAHD;AAAA,QAGiBC,YAHjB,gBAGiBA,YAHjB;AAAA,QAG+BgB,IAH/B,gBAG+BA,IAH/B;AAKL,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,GAAG,EAAGxB,EAAD,IAAQ,KAAKyB,OAAL,GAAezB,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgBwB,IADhB,EAEMjB,cAAc,IAAI,KAAKnB,WAAL,CAAiBkC,KAAjB,EAAwBI,KAAxB,EAFxB,EAGKlB,YAAY,IAAI,KAAKpB,WAAL,CAAiBkB,QAAjB,EAA2BoB,KAA3B,EAHrB,CADJ,EAMI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,QAAQ,EAAE,KAAKjB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,KAA3B;AAAiC,MAAA,SAAS,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CANJ,EAWI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CADJ;AAeH;;AA/GgC;;AAkHrCxB,MAAM,CAAC0C,SAAP,GAAmB;AACfL,EAAAA,KAAK,EAAEtC,SAAS,CAAC4C,KAAV,CAAgBC,UADR;AAEfvB,EAAAA,QAAQ,EAAEtB,SAAS,CAAC4C;AAFL,CAAnB;;AAKA,MAAME,eAAe,GAAGvC,KAAK,KAAK;AAC9B+B,EAAAA,KAAK,EAAE/B,KAAK,CAAC+B,KADiB;AAE9BhB,EAAAA,QAAQ,EAAEf,KAAK,CAACe;AAFc,CAAL,CAA7B;;AAKA,eAAevB,OAAO,CAAC+C,eAAD,EAAkB;AAAEjD,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAlB,CAAP,CAAoDG,MAApD,CAAf","sourcesContent":["import React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            boardTip: [],\n            isVisibleStart: false,\n            isVisibleTip: false,\n            isBlackFont: false,\n            isRedFont: true\n        }\n        this.giveTip = this.giveTip.bind(this);\n        this.onKey = this.onKey.bind(this);\n\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ isVisibleStart: true });\n        this.startTimer();\n        this.props.generateBoard(this.props.history);\n    }\n\n    onKey(e) {\n        e.target.innerText = \"\";\n\n        let keycode = e.keyCode;\n        if(keycode > 64 && keycode < 91 || keycode > 185 && keycode < 193 ||\n            keycode > 218 && keycode < 223 || keycode == 48) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(keycode == 32 || keycode == 13) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(e.target.innerText.length === 1) {\n            e.preventDefault();\n        }\n    }\n\n    createBoard = (...table) => {\n        let result = [];\n        let { isBlackFont, isRedFont } = this.state;\n\n        for(let i=0; i<table.length; i++) {\n            for(let j=0; j<table[i].length; j++) {\n                let children = [];\n                for(let k=0; k<table[i][j].length; k++) {\n                    if(table[i][j][k] === 0) {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                    .filter(e => !!e).join(' ')}\n                                        contentEditable=\"true\"\n                                        onKeyDown={this.onKey}\n                                        > \n                                    </div>);\n                    } else {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                    .filter(e => !!e).join(' ')}\n                                        onKeyUp={this.onKey}\n                                        >\n                                         { table[i][j][k] }\n                                    </div>);\n                    }\n                }\n                result.push(children);\n                result.push(<div className=\"clear\"></div>);\n            }  \n        }\n        return result;\n    }\n\n    giveTip(e) {\n        e.preventDefault();\n        const { board, getTip } = this.props;\n        this.setState({ \n            isVisibleTip: true,\n            isVisibleStart: false,\n            isBlackFont: true,\n            isRedFont: false\n        })\n        getTip(board, this.state.history);   \n    }\n\n    render() {\n        const { board } = this.props;\n        const { boardTip } = this.props;\n        let { isVisibleStart, isVisibleTip, time } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"left\" ref={(el) => this.divLeft = el}>\n                    Game time: {time}\n                    { isVisibleStart && this.createBoard(board).slice()}\n                    {isVisibleTip && this.createBoard(boardTip).slice()}\n                </div>\n                <div className=\"right\">\n                    <form onSubmit={this.giveTip}>\n                        <input type=\"submit\" value=\"Tip\" className=\"btnTip\" />\n                    </form>\n                </div>\n                <div className=\"clear\"></div>       \n            </div>\n        );\n    }\n}\n\nSudoku.propTypes = {\n    board: PropTypes.array.isRequired,\n    boardTip: PropTypes.array\n}\n\nconst mapStateToProps = state => ({\n    board: state.board,\n    boardTip: state.boardTip\n})\n\nexport default connect(mapStateToProps, { generateBoard, getTip })(Sudoku);"]},"metadata":{},"sourceType":"module"}