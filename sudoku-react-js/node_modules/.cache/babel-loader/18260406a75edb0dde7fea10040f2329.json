{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js\";\nimport React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n  constructor() {\n    super();\n\n    this.createBoard = (...table) => {\n      let result = [];\n      let x = 0;\n\n      for (let i = 0; i < table.length; i++) {\n        for (let j = 0; j < table[i].length; j++) {\n          let children = [];\n\n          for (let k = 0; k < table[i][j].length; k++) {\n            if (table[i][j][k] === 0) {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                className: \"square\",\n                contentEditable: \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 37\n                },\n                __self: this\n              }));\n            } else {\n              children.push(React.createElement(\"div\", {\n                key: table[0][j][k],\n                ref: el => this.divRef = el,\n                className: \"square\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 45\n                },\n                __self: this\n              }, React.createElement(\"span\", {\n                className: \"field\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 50\n                },\n                __self: this\n              }, table[i][j][k])));\n            }\n          }\n\n          result.push(children);\n          result.push(React.createElement(\"div\", {\n            className: \"clear\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }));\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      boardTip: [],\n      isVisibleStart: false,\n      isVisibleTip: false\n    };\n    this.giveTip = this.giveTip.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isVisibleStart: true\n    });\n    this.props.generateBoard(this.props.history);\n  }\n\n  componentDidUpdate() {\n    this.setState({\n      isVisibleStart: false\n    });\n    this.setState({\n      isVisibleTip: true\n    });\n  }\n\n  giveTip() {// const { board } = this.props;\n    // const tip = this.createBoard(board).slice();\n    // this.setState({ boardTip: tip });\n    // console.log(\"TIP array\");\n    // console.log(tip);\n    // console.log(\"STATE\");\n    // console.log(this.state.boardTip);\n    // this.props.getTip(board, this.state.history);\n    // this.divLeft.innerHTML = \"\";\n    // this.divLeft.innerHTML = this.createBoard(solvedArray).slice();\n  }\n\n  render() {\n    const board = this.props.board;\n    const boardTip = this.props.boardTip;\n    let isVisibleStart = this.state.isVisibleStart;\n    let isVisibleTip = this.state.isVisibleTip;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      ref: el => this.divLeft = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, isVisibleStart && this.createBoard(board).slice(), isVisibleTip && this.createBoard(boardTip).slice()), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.giveTip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Tip\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSudoku.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardTip: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  boardTip: state.boardTip\n});\n\nexport default connect(mapStateToProps, {\n  generateBoard,\n  getTip\n})(Sudoku);","map":{"version":3,"sources":["/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js"],"names":["React","generateBoard","getTip","connect","PropTypes","Sudoku","Component","constructor","createBoard","table","result","x","i","length","j","children","k","push","el","divRef","state","boardTip","isVisibleStart","isVisibleTip","giveTip","bind","componentDidMount","setState","props","history","componentDidUpdate","render","board","divLeft","slice","propTypes","array","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Sudoku extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            boardTip: [],\n            isVisibleStart: false,\n            isVisibleTip: false\n        }\n        this.giveTip = this.giveTip.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ isVisibleStart: true });\n        this.props.generateBoard(this.props.history);\n    }\n\n    componentDidUpdate() {\n        this.setState({ isVisibleStart: false });\n        this.setState({ isVisibleTip: true });\n    }\n\n    createBoard = (...table) => {\n        let result = [];\n        let x = 0;\n        for(let i=0; i<table.length; i++) {\n            for(let j=0; j<table[i].length; j++) {\n                let children = [];\n                for(let k=0; k<table[i][j].length; k++) {\n                    if(table[i][j][k] === 0) {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        className=\"square\"\n                                        contentEditable=\"true\"\n                                        > \n                                    </div>);\n                    } else {\n                        children.push(<div \n                                        key={table[0][j][k]} \n                                        ref={(el) => this.divRef = el} \n                                        className=\"square\"\n                                        >\n                                            <span className=\"field\">{ table[i][j][k] }</span>\n                                    </div>);\n                    }\n                }\n                result.push(children);\n                result.push(<div className=\"clear\"></div>);\n            }  \n        }\n        return result;\n    }\n\n    giveTip() {\n        // const { board } = this.props;\n        // const tip = this.createBoard(board).slice();\n        // this.setState({ boardTip: tip });\n\n        // console.log(\"TIP array\");\n        // console.log(tip);\n        // console.log(\"STATE\");\n        // console.log(this.state.boardTip);\n\n\n\n        // this.props.getTip(board, this.state.history);\n\n\n        \n\n        // this.divLeft.innerHTML = \"\";\n        // this.divLeft.innerHTML = this.createBoard(solvedArray).slice();\n    }\n\n    render() {\n        const { board } = this.props;\n        const { boardTip } = this.props;\n        \n        let isVisibleStart = this.state.isVisibleStart;\n        let isVisibleTip = this.state.isVisibleTip;\n        return (\n            <div className=\"container\">\n                <div className=\"left\" ref={(el) => this.divLeft = el}>\n                    { isVisibleStart && this.createBoard(board).slice()}\n                    {isVisibleTip && this.createBoard(boardTip).slice()}\n                </div>\n                <div className=\"right\">\n                    <form onSubmit={this.giveTip}>\n                        <input type=\"submit\" value=\"Tip\" className=\"btnTip\" />\n                    </form>\n                </div>\n                <div className=\"clear\"></div>       \n            </div>\n        );\n    }\n}\n\nSudoku.propTypes = {\n    board: PropTypes.array.isRequired,\n    boardTip: PropTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n    board: state.board,\n    boardTip: state.boardTip\n})\n\nexport default connect(mapStateToProps, { generateBoard, getTip })(Sudoku);"]},"metadata":{},"sourceType":"module"}