{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js\";\nimport React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { checkResult, checkResultTip } from '../actions/resultActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\n\nclass Sudoku extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createBoard = (...table) => {\n      let result = [];\n      let _this$state = this.state,\n          isBlackFont = _this$state.isBlackFont,\n          isRedFont = _this$state.isRedFont;\n      let x = 0;\n\n      for (let a = 0; a < table.length; a++) {\n        for (let i = 0; i < table[a].length; i++) {\n          if (i === 0) {\n            for (let j = 0; j < table[a][i].length; j++) {\n              let children = [];\n\n              for (let k = 0; k < table[a][i][j].length; k++) {\n                if (table[a][i][j][k] === 0) {\n                  children.push(React.createElement(\"div\", {\n                    key: table[a][0][j][k],\n                    ref: el => {\n                      this.divs[x++] = el;\n                    },\n                    className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                    contentEditable: \"true\",\n                    onKeyDown: this.onKey,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 84\n                    },\n                    __self: this\n                  }));\n                  this.isEmptyDivArray.push(new coordinatesForEmptyCell(j, k));\n                } else {\n                  children.push(React.createElement(\"div\", {\n                    key: table[a][0][j][k],\n                    ref: el => {\n                      this.divs[x++] = el;\n                    },\n                    className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                    onKeyDown: this.onKey,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 95\n                    },\n                    __self: this\n                  }, table[a][i][j][k]));\n                }\n              }\n\n              result.push(children);\n              result.push(React.createElement(\"div\", {\n                className: \"clear\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 107\n                },\n                __self: this\n              }));\n            }\n          }\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      boardTip: [],\n      isVisibleStart: false,\n      isVisibleTip: false,\n      isBlackFont: false,\n      isRedFont: true,\n      time: [],\n      username: '',\n      invalidUserName: false\n    };\n    this.timerRef = React.createRef();\n    this.divs = [];\n    this.giveTip = this.giveTip.bind(this);\n    this.onKey = this.onKey.bind(this);\n    this.checkBoard = this.checkBoard.bind(this);\n    this.passTime = this.passTime.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.isEmptyDivArray = [];\n  }\n\n  componentDidMount() {\n    this.setState({\n      isVisibleStart: true\n    });\n    this.props.generateBoard(this.props.history);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onKey(e) {\n    e.target.innerText = \"\";\n    let keycode = e.keyCode;\n\n    if (keycode > 64 && keycode < 91 || keycode > 185 && keycode < 193 || keycode > 218 && keycode < 223 || keycode === 48) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (keycode === 32 || keycode === 13) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (e.target.innerText.length === 1) {\n      e.preventDefault();\n    }\n  }\n\n  coordinatesForEmptyCell(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  passTime(newTime) {\n    this.state.time.push(newTime);\n  }\n\n  giveTip(e) {\n    e.preventDefault();\n    const _this$props = this.props,\n          board = _this$props.board,\n          getTip = _this$props.getTip;\n    this.setState({\n      isVisibleTip: true,\n      isVisibleStart: false,\n      isBlackFont: true,\n      isRedFont: false\n    });\n    getTip(board, this.state.history);\n  }\n\n  checkBoard(e) {\n    e.preventDefault();\n\n    if (this.state.username.length === 0) {\n      this.setState({\n        invalidUserName: true\n      });\n      e.preventDefault();\n    }\n\n    let isTip = this.state.isVisibleTip;\n    this.timerRef.current.stopTime();\n    let time = this.state.time[0];\n    let userName = this.state.username;\n\n    if (isTip) {\n      this.props.checkResultTip(time, userName, this.props.history);\n    } else {\n      let fullFilledBoard = this.divs;\n      let processedBoard = this.processBoard(fullFilledBoard);\n      this.props.checkResult(processedBoard, time, userName, this.props.history);\n    }\n  }\n\n  create2DArray(rows) {\n    var array = [];\n\n    for (var i = 0; i < rows; i++) {\n      array[i] = [];\n    }\n\n    return array;\n  }\n\n  processBoard(...table) {\n    let result = this.create2DArray(9);\n    let rows = 0;\n    let columns = 0;\n\n    for (let i = 0; i < 81; i++) {\n      if (columns === 9) {\n        columns = 0;\n        rows++;\n      }\n\n      result[rows][columns] = table[0][i].innerText;\n      columns++;\n    }\n\n    return result;\n  }\n\n  render() {\n    const board = this.props.board;\n    const boardTip = this.props.boardTip;\n    let _this$state2 = this.state,\n        isVisibleStart = _this$state2.isVisibleStart,\n        isVisibleTip = _this$state2.isVisibleTip;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      ref: el => this.divLeft = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"sizeh4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Game time: \", React.createElement(Timer, {\n      ref: this.timerRef,\n      onPassTime: this.passTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), isVisibleStart && this.createBoard(board).slice(), isVisibleTip && this.createBoard(boardTip).slice()), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"keyboard-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"sizeh3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"If you feel that you're stuck for too long check solution\"), React.createElement(\"form\", {\n      onSubmit: this.giveTip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Tip\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      onSubmit: this.checkBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"redFont\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Remember, input user name before send solution\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      id: \"username\",\n      className: \"inputUser\",\n      maxLength: \"22\",\n      ref: el => this.userNameRef = el,\n      onChange: this.onChange,\n      value: this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Check board\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(ShowInvalidUserName, {\n      invalidUserName: this.state.invalidUserName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction ShowInvalidUserName(props) {\n  if (props.invalidUserName) {\n    return React.createElement(\"div\", {\n      className: \"alert alert-danger invalidUser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"You forgot input your user name. Try again...\");\n  }\n\n  return null;\n}\n\nSudoku.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardTip: PropTypes.array,\n  result: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  boardTip: state.boardTip,\n  result: state.result\n});\n\nexport default connect(mapStateToProps, {\n  generateBoard,\n  getTip,\n  checkResult,\n  checkResultTip\n})(Sudoku);","map":{"version":3,"sources":["/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js"],"names":["React","generateBoard","getTip","checkResult","checkResultTip","connect","PropTypes","Timer","Sudoku","Component","constructor","props","createBoard","table","result","state","isBlackFont","isRedFont","x","a","length","i","j","children","k","push","el","divs","filter","e","join","onKey","isEmptyDivArray","coordinatesForEmptyCell","boardTip","isVisibleStart","isVisibleTip","time","username","invalidUserName","timerRef","createRef","giveTip","bind","checkBoard","passTime","onChange","componentDidMount","setState","history","target","name","value","innerText","keycode","keyCode","preventDefault","y","newTime","board","isTip","current","stopTime","userName","fullFilledBoard","processedBoard","processBoard","create2DArray","rows","array","columns","render","divLeft","slice","userNameRef","ShowInvalidUserName","propTypes","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { checkResult, checkResultTip } from '../actions/resultActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\n\nclass Sudoku extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            boardTip: [],\n            isVisibleStart: false,\n            isVisibleTip: false,\n            isBlackFont: false,\n            isRedFont: true,\n            time: [],\n            username: '',\n            invalidUserName: false\n        }\n        this.timerRef = React.createRef();\n\n        this.divs = [];\n\n        this.giveTip = this.giveTip.bind(this);\n        this.onKey = this.onKey.bind(this);\n        this.checkBoard = this.checkBoard.bind(this);\n        this.passTime = this.passTime.bind(this);\n        this.onChange = this.onChange.bind(this);\n\n        this.isEmptyDivArray = [];\n    }\n\n    componentDidMount() {\n        this.setState({ isVisibleStart: true });\n        this.props.generateBoard(this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onKey(e) {\n        e.target.innerText = \"\";\n\n        let keycode = e.keyCode;\n        if((keycode > 64 && keycode < 91) || (keycode > 185 && keycode < 193) ||\n            (keycode > 218 && keycode < 223) || keycode === 48) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(keycode === 32 || keycode === 13) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(e.target.innerText.length === 1) {\n            e.preventDefault();\n        }\n    }\n\n    coordinatesForEmptyCell(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    passTime(newTime) {\n        this.state.time.push(newTime)\n    }\n\n    createBoard = (...table) => {\n        let result = [];\n        let { isBlackFont, isRedFont } = this.state;\n        let x = 0;\n        for(let a=0; a<table.length; a++) {\n            for(let i=0; i<table[a].length; i++) {\n                if(i === 0) {\n                    for(let j=0; j<table[a][i].length; j++) {\n                        let children = [];\n        \n                        for(let k=0; k<table[a][i][j].length; k++) {\n                            if(table[a][i][j][k] === 0) {\n                                children.push(<div \n                                                key={table[a][0][j][k]} \n                                                ref={(el) => {this.divs[x++] = el}} \n                                                className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                            .filter(e => !!e).join(' ')}\n                                                contentEditable=\"true\"\n                                                onKeyDown={this.onKey}\n                                                > \n                                            </div>);\n                                this.isEmptyDivArray.push(new coordinatesForEmptyCell(j, k));\n                            } else {\n                                children.push(<div \n                                                key={table[a][0][j][k]} \n                                                ref={(el) => {this.divs[x++] = el}} \n                                                className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                            .filter(e => !!e).join(' ')}\n                                                onKeyDown={this.onKey}\n                                                >\n                                                 { table[a][i][j][k] }\n                                            </div>);\n                            }\n                        }\n                        result.push(children);\n                        result.push(<div className=\"clear\"></div>);\n                    }\n                }             \n            }\n        }\n        return result;\n    }\n\n    giveTip(e) {\n        e.preventDefault();\n        const { board, getTip } = this.props;\n        this.setState({ \n            isVisibleTip: true,\n            isVisibleStart: false,\n            isBlackFont: true,\n            isRedFont: false\n        })\n        getTip(board, this.state.history);   \n    }\n\n    checkBoard(e) {\n        e.preventDefault();\n\n        if(this.state.username.length === 0) {\n            this.setState({ invalidUserName: true });\n            e.preventDefault();\n        }\n\n        let isTip = this.state.isVisibleTip;\n        this.timerRef.current.stopTime();\n\n        let time = this.state.time[0];\n        let userName = this.state.username;\n\n        if(isTip) {\n            this.props.checkResultTip(time, userName, this.props.history);\n        } else {\n            let fullFilledBoard = this.divs;\n            let processedBoard = this.processBoard(fullFilledBoard);\n\n            this.props.checkResult(processedBoard, time, userName, this.props.history);\n        }\n    }\n\n    create2DArray(rows) {\n        var array = [];   \n        for (var i=0;i<rows;i++) {\n           array[i] = [];\n        }\n        return array;\n      }\n\n    processBoard(...table) {\n        let result = this.create2DArray(9);\n        let rows = 0;\n        let columns = 0;\n        for(let i=0; i<81; i++) {\n            if(columns === 9) {\n                columns = 0;\n                rows++;\n            }\n            result[rows][columns] = table[0][i].innerText;\n            columns++;\n        }\n        return result;\n    }\n\n    render() {\n        const { board } = this.props;\n        const { boardTip } = this.props;\n        let { isVisibleStart, isVisibleTip } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"left\" ref={(el) => this.divLeft = el}>\n                <h4 className=\"sizeh4\">Game time: <Timer ref={this.timerRef} onPassTime={this.passTime} /></h4>\n                <br />\n                    { isVisibleStart && this.createBoard(board).slice()}\n                    {isVisibleTip && this.createBoard(boardTip).slice()}\n                </div>\n                <div className=\"right\">\n                    <div className=\"keyboard-control\">\n                        <h3 className=\"sizeh3\">If you feel that you're stuck for too long check solution</h3>\n                        \n                        <form onSubmit={this.giveTip}>\n                            <input type=\"submit\" value=\"Tip\" className=\"btnTip\" />\n                        </form>\n\n                        <form onSubmit={this.checkBoard} >\n                            <h5 className=\"redFont\">Remember, input user name before send solution</h5>\n                            <input \n                                type=\"text\" \n                                name=\"username\" \n                                id=\"username\" \n                                className=\"inputUser\" \n                                maxLength=\"22\"\n                                ref={(el) => this.userNameRef = el}\n                                onChange={this.onChange}\n                                value={this.state.username}\n                            />\n                            <br />\n                            <label htmlFor=\"username\">Username</label>\n                            <br />\n                            <input \n                                type=\"submit\" \n                                value=\"Check board\" \n                                className=\"btnTip\" \n                            />\n                        </form>\n                    </div>\n                </div>\n                <div className=\"clear\"></div> \n                <ShowInvalidUserName invalidUserName={this.state.invalidUserName} />\n            </div>\n        );\n    }\n}\n\nfunction ShowInvalidUserName(props) {\n    if(props.invalidUserName) {\n        return (\n            <div className=\"alert alert-danger invalidUser\">You forgot input your user name. Try again...</div>\n        );\n    }\n    return null;\n}\n\nSudoku.propTypes = {\n    board: PropTypes.array.isRequired,\n    boardTip: PropTypes.array,\n    result: PropTypes.array\n}\n\nconst mapStateToProps = state => ({\n    board: state.board,\n    boardTip: state.boardTip,\n    result: state.result\n})\n\nexport default connect(mapStateToProps, { generateBoard, \n    getTip, checkResult, checkResultTip })(Sudoku);"]},"metadata":{},"sourceType":"module"}