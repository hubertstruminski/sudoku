{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js\";\nimport React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { checkResult, checkResultTip } from '../actions/resultActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\n\nclass Sudoku extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createBoard = (...table) => {\n      let result = [];\n      let _this$state = this.state,\n          isBlackFont = _this$state.isBlackFont,\n          isRedFont = _this$state.isRedFont;\n      let x = 0;\n\n      for (let a = 0; a < table.length; a++) {\n        for (let i = 0; i < table[a].length; i++) {\n          if (i === 0) {\n            for (let j = 0; j < table[a][i].length; j++) {\n              let children = [];\n\n              for (let k = 0; k < table[a][i][j].length; k++) {\n                let divsRef = React.createRef();\n                this.divs.push(divsRef);\n\n                if (table[a][i][j][k] === 0) {\n                  children.push(React.createElement(\"div\", {\n                    key: table[a][0][j][k],\n                    ref: divsRef,\n                    className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                    contentEditable: \"true\",\n                    onKeyDown: this.onKey,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 83\n                    },\n                    __self: this\n                  }));\n                  this.isEmptyDivArray.push(new coordinatesForEmptyCell(j, k));\n                } else {\n                  children.push(React.createElement(\"div\", {\n                    key: table[a][0][j][k],\n                    ref: divsRef,\n                    className: [isBlackFont && 'square-black', isRedFont && 'square'].filter(e => !!e).join(' '),\n                    onKeyDown: this.onKey,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 94\n                    },\n                    __self: this\n                  }, table[a][i][j][k]));\n                }\n              }\n\n              result.push(children);\n              result.push(React.createElement(\"div\", {\n                className: \"clear\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 106\n                },\n                __self: this\n              }));\n            }\n          }\n        }\n      }\n\n      return result;\n    };\n\n    this.state = {\n      boardTip: [],\n      isVisibleStart: false,\n      isBlackFont: false,\n      isRedFont: true,\n      time: [],\n      username: '',\n      invalidUserName: false,\n      isEmptyCellsArray: [],\n      numberOfTips: 0\n    };\n    this.timerRef = React.createRef();\n    this.divs = [];\n    this.giveTip = this.giveTip.bind(this);\n    this.onKey = this.onKey.bind(this);\n    this.checkBoard = this.checkBoard.bind(this);\n    this.passTime = this.passTime.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.isEmptyDivArray = [];\n  }\n\n  componentDidMount() {\n    this.setState({\n      isVisibleStart: true\n    });\n    this.props.generateBoard(this.props.history);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onKey(e) {\n    e.target.innerText = \"\";\n    let keycode = e.keyCode;\n\n    if (keycode > 64 && keycode < 91 || keycode > 185 && keycode < 193 || keycode > 218 && keycode < 223 || keycode === 48) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (keycode === 32 || keycode === 13) {\n      e.preventDefault();\n      e.target.innerText = \"\";\n    }\n\n    if (e.target.innerText.length === 1) {\n      e.preventDefault();\n    }\n  }\n\n  passTime(newTime) {\n    this.state.time.push(newTime);\n  }\n\n  giveTip(e) {\n    e.preventDefault();\n    const board = this.props.board;\n    let solvedBoard = board[1];\n\n    if (this.isEmptyDivArray.length !== 0) {\n      let index = Math.floor(Math.random() * this.isEmptyDivArray.length);\n      let x = this.isEmptyDivArray[index].x;\n      let y = this.isEmptyDivArray[index].y;\n      this.isEmptyDivArray.splice(index, 1);\n      let result = solvedBoard[x][y];\n      let numberOfDiv = x * 9 + y;\n      this.divs[numberOfDiv].current.innerText = result;\n      this.setState({\n        numberOfTips: ++this.state.numberOfTips\n      });\n    }\n  }\n\n  checkBoard(e) {\n    e.preventDefault();\n\n    if (this.state.username.length === 0) {\n      this.setState({\n        invalidUserName: true\n      });\n      e.preventDefault();\n    }\n\n    let isTip = this.state.isVisibleTip;\n    this.timerRef.current.stopTime();\n    let time = this.state.time[0];\n    let userName = this.state.username;\n    let numberOfTips = this.state.numberOfTips;\n\n    if (isTip) {\n      this.props.checkResultTip(time, userName, numberOfTips, this.props.history);\n    } else {\n      let fullFilledBoard = this.divs;\n      let processedBoard = this.processBoard(fullFilledBoard);\n      this.props.checkResult(processedBoard, time, userName, this.props.history);\n    }\n  }\n\n  create2DArray(rows) {\n    var array = [];\n\n    for (var i = 0; i < rows; i++) {\n      array[i] = [];\n    }\n\n    return array;\n  }\n\n  processBoard(...table) {\n    let result = this.create2DArray(9);\n    let rows = 0;\n    let columns = 0;\n\n    for (let i = 0; i < 81; i++) {\n      if (columns === 9) {\n        columns = 0;\n        rows++;\n      }\n\n      result[rows][columns] = table[0][i].innerText;\n      columns++;\n    }\n\n    return result;\n  }\n\n  render() {\n    const board = this.props.board;\n    let isVisibleStart = this.state.isVisibleStart;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      ref: el => this.divLeft = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"sizeh4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Game time: \", React.createElement(Timer, {\n      ref: this.timerRef,\n      onPassTime: this.passTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), isVisibleStart && this.createBoard(board).slice()), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"keyboard-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"sizeh3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"If you feel that you're stuck for too long check solution\"), React.createElement(\"form\", {\n      onSubmit: this.giveTip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Tip\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      onSubmit: this.checkBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"redFont\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Remember, input user name before send solution\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      id: \"username\",\n      className: \"inputUser\",\n      maxLength: \"22\",\n      ref: el => this.userNameRef = el,\n      onChange: this.onChange,\n      value: this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Check board\",\n      className: \"btnTip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(ShowInvalidUserName, {\n      invalidUserName: this.state.invalidUserName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction ShowInvalidUserName(props) {\n  if (props.invalidUserName) {\n    return React.createElement(\"div\", {\n      className: \"alert alert-danger invalidUser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"You forgot input your user name. Try again...\");\n  }\n\n  return null;\n}\n\nfunction coordinatesForEmptyCell(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nSudoku.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardTip: PropTypes.array,\n  result: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  boardTip: state.boardTip,\n  result: state.result\n});\n\nexport default connect(mapStateToProps, {\n  generateBoard,\n  getTip,\n  checkResult,\n  checkResultTip\n})(Sudoku);","map":{"version":3,"sources":["/home/huber/Pulpit/sudoku/sudoku-react-js/src/components/Sudoku.js"],"names":["React","generateBoard","getTip","checkResult","checkResultTip","connect","PropTypes","Timer","Sudoku","Component","constructor","props","createBoard","table","result","state","isBlackFont","isRedFont","x","a","length","i","j","children","k","divsRef","createRef","divs","push","filter","e","join","onKey","isEmptyDivArray","coordinatesForEmptyCell","boardTip","isVisibleStart","time","username","invalidUserName","isEmptyCellsArray","numberOfTips","timerRef","giveTip","bind","checkBoard","passTime","onChange","componentDidMount","setState","history","target","name","value","innerText","keycode","keyCode","preventDefault","newTime","board","solvedBoard","index","Math","floor","random","y","splice","numberOfDiv","current","isTip","isVisibleTip","stopTime","userName","fullFilledBoard","processedBoard","processBoard","create2DArray","rows","array","columns","render","el","divLeft","slice","userNameRef","ShowInvalidUserName","propTypes","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { generateBoard } from '../actions/boardActions';\nimport { getTip } from '../actions/tipActions';\nimport { checkResult, checkResultTip } from '../actions/resultActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\n\nclass Sudoku extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            boardTip: [],\n            isVisibleStart: false,\n            isBlackFont: false,\n            isRedFont: true,\n            time: [],\n            username: '',\n            invalidUserName: false,\n            isEmptyCellsArray: [],\n            numberOfTips: 0\n        }\n        this.timerRef = React.createRef();\n\n        this.divs = [];\n\n        this.giveTip = this.giveTip.bind(this);\n        this.onKey = this.onKey.bind(this);\n        this.checkBoard = this.checkBoard.bind(this);\n        this.passTime = this.passTime.bind(this);\n        this.onChange = this.onChange.bind(this);\n\n        this.isEmptyDivArray = [];\n    }\n\n    componentDidMount() {\n        this.setState({ isVisibleStart: true });\n        this.props.generateBoard(this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onKey(e) {\n        e.target.innerText = \"\";\n\n        let keycode = e.keyCode;\n        if((keycode > 64 && keycode < 91) || (keycode > 185 && keycode < 193) ||\n            (keycode > 218 && keycode < 223) || keycode === 48) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(keycode === 32 || keycode === 13) {\n            e.preventDefault();\n            e.target.innerText = \"\";\n        }\n        if(e.target.innerText.length === 1) {\n            e.preventDefault();\n        }\n    }\n\n    passTime(newTime) {\n        this.state.time.push(newTime)\n    }\n\n    createBoard = (...table) => {\n        let result = [];\n        let { isBlackFont, isRedFont } = this.state;\n        let x = 0;\n        for(let a=0; a<table.length; a++) {\n            for(let i=0; i<table[a].length; i++) {\n                if(i === 0) {\n                    for(let j=0; j<table[a][i].length; j++) {\n                        let children = [];\n        \n                        for(let k=0; k<table[a][i][j].length; k++) {\n                            let divsRef = React.createRef();\n                            this.divs.push(divsRef);\n\n                            if(table[a][i][j][k] === 0) {\n                                children.push(<div \n                                                key={table[a][0][j][k]} \n                                                ref={divsRef} \n                                                className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                            .filter(e => !!e).join(' ')}\n                                                contentEditable=\"true\"\n                                                onKeyDown={this.onKey}\n                                                > \n                                            </div>);\n                                this.isEmptyDivArray.push(new coordinatesForEmptyCell(j, k));\n                            } else {\n                                children.push(<div \n                                                key={table[a][0][j][k]} \n                                                ref={divsRef} \n                                                className={[isBlackFont && 'square-black', isRedFont && 'square']\n                                                            .filter(e => !!e).join(' ')}\n                                                onKeyDown={this.onKey}\n                                                >\n                                                 { table[a][i][j][k] }\n                                            </div>);\n                            }\n                        }\n                        result.push(children);\n                        result.push(<div className=\"clear\"></div>);\n                    }\n                }             \n            }\n        }\n        return result;\n    }\n\n    giveTip(e) {\n        e.preventDefault();\n\n        const { board } = this.props;\n        let solvedBoard = board[1];\n\n        if(this.isEmptyDivArray.length !== 0) {\n            let index = Math.floor(Math.random() * this.isEmptyDivArray.length);\n            let x = this.isEmptyDivArray[index].x;\n            let y = this.isEmptyDivArray[index].y;\n        \n            this.isEmptyDivArray.splice(index, 1);\n\n            let result = solvedBoard[x][y];  \n            let numberOfDiv = x * 9 + y;\n\n            this.divs[numberOfDiv].current.innerText = result;\n\n            this.setState({ numberOfTips: ++this.state.numberOfTips });\n        } \n    }\n\n    checkBoard(e) {\n        e.preventDefault();\n\n        if(this.state.username.length === 0) {\n            this.setState({ invalidUserName: true });\n            e.preventDefault();\n        }\n\n        let isTip = this.state.isVisibleTip;\n        this.timerRef.current.stopTime();\n\n        let time = this.state.time[0];\n        let userName = this.state.username;\n\n        let numberOfTips = this.state.numberOfTips;\n\n        if(isTip) {\n            this.props.checkResultTip(time, userName, numberOfTips, this.props.history);\n        } else {\n            let fullFilledBoard = this.divs;\n            let processedBoard = this.processBoard(fullFilledBoard);\n\n            this.props.checkResult(processedBoard, time, userName, this.props.history);\n        }\n    }\n\n    create2DArray(rows) {\n        var array = [];   \n        for (var i=0;i<rows;i++) {\n           array[i] = [];\n        }\n        return array;\n      }\n\n    processBoard(...table) {\n        let result = this.create2DArray(9);\n        let rows = 0;\n        let columns = 0;\n        for(let i=0; i<81; i++) {\n            if(columns === 9) {\n                columns = 0;\n                rows++;\n            }\n            result[rows][columns] = table[0][i].innerText;\n            columns++;\n        }\n        return result;\n    }\n\n    render() {\n        const { board } = this.props;\n        let { isVisibleStart } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"left\" ref={(el) => this.divLeft = el}>\n                <h4 className=\"sizeh4\">Game time: <Timer ref={this.timerRef} onPassTime={this.passTime} /></h4>\n                <br />\n                    { isVisibleStart && this.createBoard(board).slice()}\n                </div>\n                <div className=\"right\">\n                    <div className=\"keyboard-control\">\n                        <h3 className=\"sizeh3\">If you feel that you're stuck for too long check solution</h3>\n                        \n                        <form onSubmit={this.giveTip}>\n                            <input type=\"submit\" value=\"Tip\" className=\"btnTip\" />\n                        </form>\n\n                        <form onSubmit={this.checkBoard} >\n                            <h5 className=\"redFont\">Remember, input user name before send solution</h5>\n                            <input \n                                type=\"text\" \n                                name=\"username\" \n                                id=\"username\" \n                                className=\"inputUser\" \n                                maxLength=\"22\"\n                                ref={(el) => this.userNameRef = el}\n                                onChange={this.onChange}\n                                value={this.state.username}\n                            />\n                            <br />\n                            <label htmlFor=\"username\">Username</label>\n                            <br />\n                            <input \n                                type=\"submit\" \n                                value=\"Check board\" \n                                className=\"btnTip\" \n                            />\n                        </form>\n                    </div>\n                </div>\n                <div className=\"clear\"></div> \n                <ShowInvalidUserName invalidUserName={this.state.invalidUserName} />\n            </div>\n        );\n    }\n}\n\nfunction ShowInvalidUserName(props) {\n    if(props.invalidUserName) {\n        return (\n            <div className=\"alert alert-danger invalidUser\">You forgot input your user name. Try again...</div>\n        );\n    }\n    return null;\n}\n\nfunction coordinatesForEmptyCell(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nSudoku.propTypes = {\n    board: PropTypes.array.isRequired,\n    boardTip: PropTypes.array,\n    result: PropTypes.array\n}\n\nconst mapStateToProps = state => ({\n    board: state.board,\n    boardTip: state.boardTip,\n    result: state.result\n})\n\nexport default connect(mapStateToProps, { generateBoard, \n    getTip, checkResult, checkResultTip })(Sudoku);"]},"metadata":{},"sourceType":"module"}